;;caculate distance
(begin
	(define square_sum 
		(lambda (x y)
			(+ (* x x) (* y y))))
	(define distance
		(lambda (x y)
			(sqrt 
				(square_sum 
					(- (px x) (px y)) 
					(- (py x) (py y))))))
	(print 
		(distance 
			(p 1 1)
			(p 0 0)))
)

;;recursive
(begin
	(define fact-sum
		(lambda (x)
			(if (= x 1)
				1
				(+ (self (- x 1))
					((lambda (y)
						(if (= y 1)
							1
							(* y (self (- y 1))))) x)))))
	(print
		(fact-sum 5))
)

;;list
(begin
	(define foo
		(list 1 2))
	(print (++ foo foo 3))
)

;;looper
(define loop
	(lambda (n f)
		(if (= n 0)
			1
			(begin
				(f)
				(self (- n 1) f)))))

;;static drawing
(begin 
	(place
		(arc
			(p 10 10)
			15
			0
			PI)
		(p 25 25))
	(place 
		(line
			(p 10 10)
			(p 60 60))
		(p 10 10))
	(place
		(circle
			(p 10 10)
			15)
		(p 5 5))
	(draw)
)

;;anime
(begin 
	(define loop
		(lambda (n f)
			(if (= n 0)
				1
				(begin
					(f)
					(self (- n 1) f)))))
	(define futiao
		(g 
			(line (p 10 10) (p 80 80))
			(line (p 10 80) (p 80 10))))
	(define kuang
		(circle (p 45 45) 50))
	(define lunzi
		(g futiao kuang))
	(place lunzi (p 10 10))
	(loop 60
		(lambda ()
			(begin
				(rotate futiao (* PI 0.02))
				(shift lunzi (p 2 0))
				(draw))))
)

;;another example
(begin 
	(define loop
		(lambda (n f)
			(if (= n 0)
				1
				(begin
					(f)
					(self (- n 1) f)))))
	(define x
		(g 
			(line (p 10 10) (p 80 80))
			(line (p 10 80) (p 80 10))))
	(place x (p 10 10))
	(loop 60
		(lambda ()
			(begin
				(rotate x (* PI 0.02) (p 10 10))
				(draw))))
)

;;a cross shifting
(begin
	(define cross 
		(g
			(line (p 0 0)
				(p 50 50))
			(line (p 50 0)
				(p 0 50))
			(circle (p 25 25) (* 25 (sqrt 2)))))
	(define loop
		(lambda (n f)
			(if (= n 0)
				1
				(begin
					(f)
					(draw)
					(self (- n 1) f)))))
	 	(place cross (p 0 0)) 
	 	(loop 100 (lambda () (shift cross (p 1 1))))
	 	(erase cross)
	 	(draw)
)