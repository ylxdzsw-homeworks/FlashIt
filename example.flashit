;;caculate distance
(begin
	(define square_sum 
		(lambda (x y)
			(+ (* x x) (* y y))))
	(define distance
		(lambda (x y)
			(sqrt 
				(square_sum 
					(- (px x) (px y)) 
					(- (py x) (py y))))))
	(print 
		(distance 
			(p 1 1)
			(p 0 0)))
)

;;recursive
(begin
	(define fact-sum
		(lambda (x)
			(if (= x 1)
				1
				(+ (self (- x 1))
					((lambda (y)
						(if (= y 1)
							1
							(* y (self (- y 1))))) x)))))
	(print
		(fact-sum 5))
)

;;list
(begin
	(define foo
		(list 1 2))
	(print (++ foo foo 3))
)

;;looper
(define loop
	(lambda (n f)
		(if (= n 0)
			1
			(begin
				(f)
				(self (- n 1) f)))))

;;static drawing
(begin 
	(place 
		(line
			(p 10 10)
			(p 60 60))
		(p 10 10))
	(draw)
)

;;anime
(begin 
	(define loop
		(lambda (n f)
			(if (= n 0)
				1
				(begin
					(f)
					(self (- n 1) f)))))
	(define aline
		(line 
			(p 10 10)
			(p 20 20)))
	(place aline (p 10 10))
	(loop 60
		(lambda ()
			(begin
				(rotate aline (* PI 0.02))
				(draw))))
)

;;a cross shifting
(define cross 
	(+
		(line (p 0 0)
			(p 50 50))
		(line (p 50 0)
			(p 0 50))
		(circle (p 25 25) 25)))
 	(place cross (p 50 50)) 
 	(loop 100 (+ (shift cross right) (shift cross up))) 
 	(erase cross)
